// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String   @id @default(uuid())
  firstName              String
  lastName               String
  email                  String   @unique
  phoneNumber            String
  notificationPreference String
  paymentMethod          String
  homeAddress            BigInt
  workLocation           String
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  hashedPassword         String

  vehicles        Vehicle[]
  notifications   Notification[]
  payments        Payment[]
  parkingSessions ParkingSession[]
}

model Vehicle {
  id           String   @id @default(uuid())
  userID       String
  licensePlate BigInt   @unique
  make         String
  model        String
  type         String
  year         String
  color        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user            User             @relation(fields: [userID], references: [id])
  parkingSessions ParkingSession[]
}

model Notification {
  id       String   @id @default(uuid())
  userID   String
  message  String
  dateTime DateTime @default(now())

  user User @relation(fields: [userID], references: [id])
}

model Payment {
  id            String   @id @default(uuid())
  userID        String
  amount        BigInt
  dateTime      DateTime @default(now())
  paymentMethod String
  parkingSpotID String

  user        User        @relation(fields: [userID], references: [id])
  parkingSpot ParkingSpot @relation(fields: [parkingSpotID], references: [id])
}

model Street {
  id          BigInt @id @default(autoincrement())
  name        BigInt
  city        BigInt
  parkingRate BigInt

  parkingSpots ParkingSpot[]
}

model ParkingSpot {
  id             String  @id @default(uuid())
  streetID       BigInt
  latitude       BigInt
  longitude      BigInt
  durationLimit  BigInt
  streetCleaning Boolean

  street          Street           @relation(fields: [streetID], references: [id])
  payments        Payment[]
  parkingSessions ParkingSession[]
}

model ParkingSession {
  id            String   @id @default(uuid())
  userID        String
  vehicleID     String
  parkingSpotID String
  startTime     DateTime
  endTime       DateTime
  amountPaid    Decimal

  user        User        @relation(fields: [userID], references: [id])
  vehicle     Vehicle     @relation(fields: [vehicleID], references: [id])
  parkingSpot ParkingSpot @relation(fields: [parkingSpotID], references: [id])
}
